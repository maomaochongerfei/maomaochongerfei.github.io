<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[hexo+github搭建博客]]></title>
      <url>/2017/04/21/jiaocheng-hexo/</url>
      <content type="html"><![CDATA[<p>#hexo+github搭建博客<br><img src="/assets/blogImg/hexo.png" alt="hexo"><br><a id="more"></a><br><em>我用的系统的ubuntu，其实lwindows和Mac下也三一样的</em><br><br></p>
<blockquote>
<p>GitHub Pages 有以下几个优点：<br>轻量级的博客系统，没有麻烦的配置<br>免费空间，享受 Git 版本管理功能<br>使用标记语言，比如 Markdown<br>无需自己搭建服务器<br>可以绑定自己的域名<br>当然他也有缺点：<br>搭配模板系统，相当于静态页发布，每运行生成一次都必须遍历全部的文本文件，网站越大，生成时间越长<br>动态程序的部分相当局限，比如没有评论，不过有解决方案<br>基于 Git，很多东西需要定制，不像 Wordpress 有强大的后台</p>
</blockquote>
<p>####准备工作：<br>1.<strong>安装git 和node js，这个就不多说了</strong></p>
<p>2.<strong>创建github pages，即**</strong>创建一个仓库，名字是[yourGithubAccount].github.io**    </p>
<p>3.<strong>网上有的说要生成ssh key和绑定git hub的帐号和邮箱，我试了下，不做这一步也算可以的，这里还算补下命令</strong></p>
<p>4.<strong><em> 使用 git bash 生成 public ssh key</em>：</strong></p>
<blockquote>
<p>$ ssh-keygen -t rsa</p>
</blockquote>
<p><em>这时windows和Linux用户目录下的.ssh/下会生成id_rsa.pub （这个文件夹是隐藏的，linux下按ctrl+H显示），将 id_rsa.pub 的内容完全复制到 github Account Setting 里的 ssh key 里即可</em></p>
<p><strong>ps：以下5 ，6步可以跳过</strong></p>
<p>5.<strong>测试</strong></p>
<blockquote>
<p>$ ssh -T git@github.com<br>然后会看到<br><em>Hi [yourGithubAccount]! You’ve successfully authenticated, but GitHub does not provide shell access.</em></p>
</blockquote>
<p>6.<strong>设置用户信息</strong></p>
<blockquote>
<p>$ git config –global user.name “[yourName]”//用户名<br>$ git config –global user.email  “[yourEmail]”//填写自己的邮箱</p>
</blockquote>
<p>7.<strong>安装、配置 hexo</strong><br>选择本地的一个文件夹，cd进去</p>
<blockquote>
<p>$ npm install -g hexo-cli<br>$ npm install hexo –save<br>$ hexo init</p>
</blockquote>
<p>8.<strong>安装 ejs，否则无法解析模板</strong></p>
<blockquote>
<p>$ npm install</p>
</blockquote>
<p>9.<strong>生成 public 文件夹</strong></p>
<blockquote>
<p>$ hexo g</p>
</blockquote>
<p>10.<strong>开启本地服务器</strong></p>
<blockquote>
<p>$ hexo s<br>输入127.0.0.1:4000即可访问本地博客了</p>
</blockquote>
<p>####部署<br>1.<strong>配置 _config.yml</strong></p>
<blockquote>
<p>deploy:<br>  type: git<br>  repository: <a href="https://github.com/maomaochongerfei/maomaochongerfei.github.io.git" target="_blank" rel="external">https://github.com/maomaochongerfei/maomaochongerfei.github.io.git</a><br>  branch: master<br>  这里替换成自己的仓库就可以啦！</p>
</blockquote>
<p>  2.<strong>push到github</strong></p>
<blockquote>
<p>hexo g -d<br>  输入帐号密码即可<br>  然后就可以到远程仓库看静态文件已经生成了。</p>
</blockquote>
<p>####常用命令</p>
<blockquote>
<p>插件的升级与卸载<br>$ npm update<br>$ npm uninstall <plugin-name></plugin-name></p>
<p>更新 hexo<br>npm update -g hexo</p>
<p><strong>绑定自定义域名</strong><br>在/source/ 目录下新建内容为自定义域名的 CNAME 文件，部署即可（域名设置略）<br>我的是520zhang.cn</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[c语言写pl0词法分析程序]]></title>
      <url>/2017/04/20/pl0-by-c/</url>
      <content type="html"><![CDATA[<p><img src="/assets/blogImg/pl0.png" alt="向上吧"> <br></p>
<blockquote>
<p>实验要求：用c语言写一个pl0词法分析器，为语法语义分析提供单词，使之能把输入的字符串形式的源程序分割成一个个单词符号传递给语义分析，并把分析结果输出       </p>
</blockquote>
<p><br><br><a id="more"></a></p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">"stdio.h"</span></span>
<span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">"string.h"</span></span>
<span class="token macro property">#<span class="token directive keyword">define</span> lineLength 100  </span><span class="token comment" spellcheck="true">//固定每行的长度</span>
<span class="token macro property">#<span class="token directive keyword">define</span> primLength 10   </span><span class="token comment" spellcheck="true">//读取的字符串的长度（标识符之类）</span>
<span class="token macro property">#<span class="token directive keyword">define</span> numLength 20    </span><span class="token comment" spellcheck="true">//读取的常量的长度</span>

<span class="token comment" spellcheck="true">//存储基本字</span>
<span class="token keyword">char</span> mPrimary<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"begin"</span><span class="token punctuation">,</span><span class="token string">"call"</span><span class="token punctuation">,</span><span class="token string">"const"</span><span class="token punctuation">,</span><span class="token string">"do"</span><span class="token punctuation">,</span><span class="token string">"end"</span><span class="token punctuation">,</span><span class="token string">"if"</span><span class="token punctuation">,</span><span class="token string">"odd"</span><span class="token punctuation">,</span>
                        <span class="token string">"procedure"</span><span class="token punctuation">,</span><span class="token string">"read"</span><span class="token punctuation">,</span><span class="token string">"then"</span><span class="token punctuation">,</span><span class="token string">"var"</span><span class="token punctuation">,</span><span class="token string">"while"</span><span class="token punctuation">,</span><span class="token string">"write"</span><span class="token punctuation">,</span><span class="token string">"xujiajia"</span>
                       <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">char</span> text<span class="token punctuation">[</span>lineLength<span class="token punctuation">]</span><span class="token punctuation">[</span>lineLength<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存储读到的内容</span>
<span class="token keyword">int</span> listLength<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//保存读取到的内容的长度</span>

<span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//把所有的数据读入一个二维字符数组中</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> isEnd<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">char</span> my<span class="token punctuation">[</span>lineLength<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">gets</span><span class="token punctuation">(</span>my<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>lineLength<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>my<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//判断数组一行是否结束</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>my<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'\0'</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>my<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'.'</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                isEnd<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>isEnd<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            listLength<span class="token operator">=</span>i<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\n********************************************\n分析结果为：\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//对二维字符数组进行处理</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>isEnd<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>listLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">char</span> prim<span class="token punctuation">[</span>primLength<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//新建一个字符数组用来存储基本字或者变量名</span>
        <span class="token keyword">char</span> num<span class="token punctuation">[</span>numLength<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//新建一个字符数组用来存储常量</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">&lt;</span>primLength<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//清空数组</span>
            prim<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'\0'</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">&lt;</span>numLength<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//清空数组</span>
            num<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'\0'</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'\0'</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'.'</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">". 界符\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                isEnd<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">' '</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token string">'a'</span><span class="token operator">&amp;&amp;</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token string">'z'</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token string">'a'</span><span class="token operator">&amp;&amp;</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token string">'z'</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">,</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//读入字符串</span>
                    prim<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                j<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//由于用j去判断循环的结束，此处需要回退一个字符</span>

                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> prim<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'\0'</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//输出字符串</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>prim<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">int</span> ii<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>jj<span class="token operator">=</span><span class="token number">13</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//二分查找,查找是否为基本字</span>
                <span class="token keyword">int</span> kk<span class="token punctuation">;</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span>ii<span class="token operator">&lt;=</span>jj<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    kk<span class="token operator">=</span><span class="token punctuation">(</span>ii<span class="token operator">+</span>jj<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>prim<span class="token punctuation">,</span>mPrimary<span class="token punctuation">[</span>kk<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span>
                        jj<span class="token operator">=</span>kk<span class="token number">-1</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>prim<span class="token punctuation">,</span>mPrimary<span class="token punctuation">[</span>kk<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span>
                        ii<span class="token operator">=</span>kk<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>ii<span class="token number">-1</span><span class="token operator">></span>jj<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//搜索成功,确定为基本字</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" 基本字\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" 标识符\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> prim<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'\0'</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//清空数组方便下次读入</span>
                    prim<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'\0'</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">,</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//读入数字</span>
                    num<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                j<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//由于用j去判断循环的结束，此处需要回退一个字符</span>

                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> num<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'\0'</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//输出数字，并且清空方便下次读入</span>
                <span class="token punctuation">{</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>num<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    num<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'\0'</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" 常量\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span><span class="token comment" spellcheck="true">//此处处理“+-*/,#()等”</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">switch</span><span class="token punctuation">(</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                <span class="token keyword">case</span> <span class="token string">'&lt;'</span><span class="token punctuation">:</span>
                <span class="token keyword">case</span> <span class="token string">'>'</span><span class="token punctuation">:</span>
                <span class="token keyword">case</span> <span class="token string">':'</span><span class="token punctuation">:</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'='</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c%c 运算符\n"</span><span class="token punctuation">,</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        j<span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">else</span>
                    <span class="token punctuation">{</span>
                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c 运算符\n"</span><span class="token punctuation">,</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token punctuation">:</span>
                <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token punctuation">:</span>
                <span class="token keyword">case</span> <span class="token string">'*'</span><span class="token punctuation">:</span>
                <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token punctuation">:</span>
                <span class="token keyword">case</span> <span class="token string">'='</span><span class="token punctuation">:</span>
                <span class="token punctuation">{</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c 运算符\n"</span><span class="token punctuation">,</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">case</span> <span class="token string">'('</span><span class="token punctuation">:</span>
                <span class="token keyword">case</span> <span class="token string">')'</span><span class="token punctuation">:</span>
                <span class="token keyword">case</span> <span class="token string">','</span><span class="token punctuation">:</span>
                <span class="token keyword">case</span> <span class="token string">';'</span><span class="token punctuation">:</span>
                <span class="token punctuation">{</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c 界符\n"</span><span class="token punctuation">,</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">default</span><span class="token punctuation">:</span>
                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c 标识符\n"</span><span class="token punctuation">,</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>isEnd<span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\n**************************************\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      
        
        <tags>
            
            <tag> c语言 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git学习笔记]]></title>
      <url>/2017/04/20/git-learning/</url>
      <content type="html"><![CDATA[<p><em><a href="https://github.com/" target="_blank" rel="external">github</a>开源项目托管和版本控制系统。</em><br><img src="/assets/blogImg/git.jpeg" alt="苦逼程序猿"><br><a id="more"></a><br>1.安装github，这个就不多说了</p>
<p>2.绑定用户（用户和邮箱为你github注册的账号和邮箱）<br>  $ git config –global user.name “hanyuntao”<br>  $ git config –global user.email “hanyuntaocn@163.com”</p>
<p>3.设置设置SSH key（shh key 为远程服务器与本地交互的一种加密方式）</p>
<ul>
<li>首先检查是否已生成密钥cd ~/.ssh，如果返回的ls有3个文件,则密钥已经生成。如果没有密钥，则通过</li>
<li>$ ssh-keygen -t rsa -C “hanyuntaocn@163.com”</li>
<li>生成，生成过程中一路按3次回车键就好了。（默认路径，默认没有密码登录）<br>生成成功后，去对应目录C:\Users\hyt.ssh里（hyt为电脑用户名，每个人不同）用记事本打开id_rsa.pub，得到ssh key公钥。</li>
</ul>
<p>4.为github账号配置ssh key<br>  切换到github，展开个人头像的小三角，点击settings，然后打开SSH keys菜单， 点击Add SSH key新增密钥，填上标题（最好跟本地仓库保持一致）。</p>
<p>5.上传本地项目到github</p>
<ul>
<li>创建一个本地项目,首先进入text文件夹</li>
<li>执行指令：git init 初始化成功后你会发现项目里多了一个隐藏文件夹.git</li>
<li>执行指令：git add .将所有文件添加到仓库</li>
<li>执行指令：git commit -m “提交文件”双引号内是提交注释。（提交到本地版本库）</li>
</ul>
<p>6.关联github仓库</p>
<ul>
<li>到github text仓库复制https仓库地址</li>
<li>git remote add origin <a href="https://github.com/hanyuntao/text.git" target="_blank" rel="external">https://github.com/hanyuntao/text.git</a> 添加远程分支<br>（注：origin为分支名，自己可以随便取，git remote列出所有存在的分支）</li>
<li>git push -u origin master 上传本地代码，到此结束，可以上远程仓库看了</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
